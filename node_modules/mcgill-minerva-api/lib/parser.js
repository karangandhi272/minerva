'use strict';

var cheerio = require('cheerio');

exports.parseTranscript= function(html) {
  var column_map = {
    0: 'completed',
    1: 'course',
    2: 'section',
    3: 'title',
    4: 'credit',
    6: 'grade',
    10: 'class_avg'
  };

  var $ = cheerio.load(html);
  var courses = [];
  $('.dataentrytable').find('tr').each(function () {
    var row = {};
    $(this).find('td').each(function (j) {
      if(column_map[j])
        row[column_map[j]] = $(this).text();
    });
    if (row.section && row.section.length === 3) {
      var course = row.course.split(' ');
      row.department = course[0];
      row.course_number = course[1];
      courses.push(row);
    }
  });

  return courses;
};

exports.parseCourses = function(raw_html) {
  var column_map = {
    0: 'is_full',
    1: 'crn',
    2: 'department',
    3: 'course_number',
    4: 'section',
    5: 'type',
    7: 'title',
    8: 'days',
    9: 'time',
    16: 'instructor',
    19: 'status',
  };

  var $ = cheerio.load(raw_html);
  var courses = [];
  // some magic sauce
  $('.datadisplaytable').find('tr').each(function () {
    var row = {};
    $(this).find('td').each(function (j) {
      if(column_map[j])
        row[column_map[j]] = $(this).text();
    });
    if (row.department) {
      if (row.department.length === 1) { // hack for when time spans two rows or more
        var last = courses[courses.length - 1];
        last.days.push(row.days);
        last.time.push(row.time);
      } else {
        row.is_full = (row.is_full === 'C'); // cause on the page its this or a checkbox
        row.days = [row.days];
        row.time = [row.time];
        courses.push(row);
      }
    }
  });

  return courses;
};

exports.parseRegisteredCourses = function(raw_html) {
  var column_map = {
    0: 'status',
    2: 'crn',
    3: 'department',
    4: 'course_number',
    5: 'section',
    6: 'type',
    8: 'credit',
    10: 'title',
  };

  var error_map = {
    0: 'ErrorMsg',
    1: 'crn',
    2: 'department',
    3: 'course_number',
    4: 'section',
    5: 'type',
    7: 'credit',
    9: 'title',
  };

  var $ = cheerio.load(raw_html);
  var courses = [];
  // some magic sauce
  $('.datadisplaytable').find('tr').each(function () {
    var row = {};
    var isError;
    $(this).find('td').each(function (j) {
      if(j === 0) {
        isError = $(this).text().indexOf('Web Registered') === -1;
      }
      if(!isError && column_map[j])
        row[column_map[j]] = $(this).text();
      else if (isError && error_map[j])
        row[error_map[j]] = $(this).text();
    });
    if (row.department)
      courses.push(row);
  });

  return courses;
};

module.exports = {
  parseTranscript: exports.parseTranscript,
  parseCourses: exports.parseCourses,
  parseRegisteredCourses: exports.parseRegisteredCourses,
  
  parseCourseDetail: function(html) {
    var $ = cheerio.load(html);
    var courseDetail = {};
    
    // Extract course information from the detail page
    var courseTitle = $('.ddtitle').first().text();
    if (courseTitle) {
      // Parse course title which typically contains: Course Name - CRN - DEPT NUM - SEC
      var titleParts = courseTitle.split(' - ');
      if (titleParts.length >= 4) {
        courseDetail.title = titleParts[0];
        courseDetail.crn = titleParts[1];
        courseDetail.course_code = titleParts[2];
        courseDetail.section = titleParts[3];
      }
    }
    
    // Extract detailed information from the course detail table
    $('.dddefault').each(function() {
      var text = $(this).text().trim();
      
      if (text.includes('Associated Term:')) {
        courseDetail.term = text.replace('Associated Term:', '').trim();
      } else if (text.includes('Registration Dates:')) {
        courseDetail.registration_dates = text.replace('Registration Dates:', '').trim();
      } else if (text.includes('Levels:')) {
        courseDetail.levels = text.replace('Levels:', '').trim();
      } else if (text.includes('Campus:')) {
        courseDetail.campus = text.replace('Campus:', '').trim();
      } else if (text.includes('Schedule Type:')) {
        courseDetail.schedule_type = text.replace('Schedule Type:', '').trim();
      } else if (text.includes('Credits:')) {
        courseDetail.credits = text.replace('Credits:', '').trim();
      }
    });
    
    // Extract meeting times and instructor information
    var meetingTimes = [];
    $('.dddefault table tr').each(function() {
      var row = $(this);
      var cells = row.find('td');
      
      if (cells.length >= 7) {
        var meetingTime = {
          type: cells.eq(0).text().trim(),
          time: cells.eq(1).text().trim(),
          days: cells.eq(2).text().trim(),
          location: cells.eq(3).text().trim(),
          date_range: cells.eq(4).text().trim(),
          schedule_type: cells.eq(5).text().trim(),
          instructors: cells.eq(6).text().trim()
        };
        
        if (meetingTime.type && meetingTime.type !== 'Type') {
          meetingTimes.push(meetingTime);
        }
      }
    });
    
    courseDetail.meeting_times = meetingTimes;
    
    // Extract any additional course description or prerequisites
    var description = $('.dddefault').last().text();
    if (description && description.length > 50) {
      courseDetail.description = description.trim();
    }
    
    return courseDetail;
  },
  
  parseWeeklySchedule: function(html) {
    console.log('Parsing weekly schedule HTML, length:', html ? html.length : 0);
    
    var cheerio = require('cheerio');
    var $ = cheerio.load(html);
    var courses = [];
    
    try {
      // Find all course links in the schedule table
      $('a[href*="P_CrseSchdDetl"]').each(function() {
        var link = $(this);
        var href = link.attr('href');
        var courseText = link.text().trim();
        
        console.log('Found course link:', courseText);
        console.log('Link href:', href);
        
        // Extract CRN from the href URL
        var crnMatch = href.match(/crn=(\d+)/);
        var crn = crnMatch ? crnMatch[1] : '';
        
        console.log('Extracted CRN:', crn);
        
        // Extract term from the href URL
        var termMatch = href.match(/term_in=(\d+)/);
        var term = termMatch ? termMatch[1] : '';
        
        // Parse the course text - it's all concatenated without line breaks
        // Format: "COMP 310-001\n1840 2 times 1.5 hrs/wk\n8:35 am-9:55 am\nMcIntyre Medical Building 522"
        // But it might come as one string without \n separators
        
        var courseCodeMatch = courseText.match(/^([A-Z]+)\s+(\d+)-(\w+)/);
        
        if (courseCodeMatch) {
          var department = courseCodeMatch[1];
          var course_number = courseCodeMatch[2];
          var section = courseCodeMatch[3];
          
          console.log('Parsed course code:', { department: department, course_number: course_number, section: section });
          
          // Extract time information - look for time pattern in the text
          var timeMatch = courseText.match(/(\d{1,2}:\d{2}\s*(?:am|pm))\s*-\s*(\d{1,2}:\d{2}\s*(?:am|pm))/i);
          var timeInfo = '';
          if (timeMatch) {
            timeInfo = timeMatch[0]; // Full time range
            console.log('Found time info:', timeInfo);
          }
          
          // Extract location - everything after the time
          var location = '';
          if (timeMatch) {
            var timeEndIndex = courseText.indexOf(timeMatch[0]) + timeMatch[0].length;
            location = courseText.substring(timeEndIndex).trim();
            console.log('Found location:', location);
          }
          
          // Convert time format from "8:35 am-9:55 am" to "08:35-09:55"
          function convertTime(timeStr) {
            if (!timeStr) return '';
            
            return timeStr.replace(/(\d{1,2}):(\d{2})\s*(am|pm)/gi, function(match, hour, min, ampm) {
              var h = parseInt(hour);
              if (ampm.toLowerCase() === 'pm' && h !== 12) h += 12;
              if (ampm.toLowerCase() === 'am' && h === 12) h = 0;
              return h.toString().padStart(2, '0') + ':' + min;
            });
          }
          
          var time24 = convertTime(timeInfo);
          console.log('Converted time:', time24);
          
          // Determine days based on the cell position in the table
          var cell = link.closest('td');
          var cellIndex = cell.index();
          
          console.log('Cell index:', cellIndex);
          
          // Map cell index to days (0=empty, 1=Monday, 2=Tuesday, etc.)
          var dayMap = ['', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
          var day = dayMap[cellIndex] || '';
          
          console.log('Determined day:', day);
          
          // Check if we already have this course
          var existingCourse = null;
          for (var i = 0; i < courses.length; i++) {
            if (courses[i].crn === crn) {
              existingCourse = courses[i];
              break;
            }
          }
          
          if (existingCourse) {
            // Add this day and time to existing course
            if (day && existingCourse.days.indexOf(day) === -1) {
              existingCourse.days.push(day);
              existingCourse.time.push(time24);
            }
            console.log('Updated existing course:', existingCourse);
          } else {
            // Create new course entry
            var course = {
              crn: crn,
              department: department,
              course_number: course_number,
              section: section,
              title: department + ' ' + course_number, // Basic title from course code
              instructor: '', // Not available in weekly schedule
              days: day ? [day] : [],
              time: time24 ? [time24] : [],
              location: location,
              credits: '', // Not available in weekly schedule
              type: 'Lecture' // Default type
            };
            
            console.log('Created new course:', course);
            courses.push(course);
          }
        } else {
          console.log('Could not parse course code from:', courseText);
        }
      });
      
      console.log('Parsed courses from weekly schedule:', courses);
      return courses;
    } catch (error) {
      console.log('Error parsing weekly schedule:', error);
      return [];
    }
  }
};
