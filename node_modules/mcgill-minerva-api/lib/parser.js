'use strict';

var cheerio = require('cheerio');

exports.parseTranscript= function(html) {
  var column_map = {
    0: 'completed',
    1: 'course',
    2: 'section',
    3: 'title',
    4: 'credit',
    6: 'grade',
    10: 'class_avg'
  };

  var $ = cheerio.load(html);
  var courses = [];
  $('.dataentrytable').find('tr').each(function () {
    var row = {};
    $(this).find('td').each(function (j) {
      if(column_map[j])
        row[column_map[j]] = $(this).text();
    });
    if (row.section && row.section.length === 3) {
      var course = row.course.split(' ');
      row.department = course[0];
      row.course_number = course[1];
      courses.push(row);
    }
  });

  return courses;
};

exports.parseCourses = function(raw_html) {
  var column_map = {
    0: 'is_full',
    1: 'crn',
    2: 'department',
    3: 'course_number',
    4: 'section',
    5: 'type',
    7: 'title',
    8: 'days',
    9: 'time',
    16: 'instructor',
    19: 'status',
  };

  var $ = cheerio.load(raw_html);
  var courses = [];
  // some magic sauce
  $('.datadisplaytable').find('tr').each(function () {
    var row = {};
    $(this).find('td').each(function (j) {
      if(column_map[j])
        row[column_map[j]] = $(this).text();
    });
    if (row.department) {
      if (row.department.length === 1) { // hack for when time spans two rows or more
        var last = courses[courses.length - 1];
        last.days.push(row.days);
        last.time.push(row.time);
      } else {
        row.is_full = (row.is_full === 'C'); // cause on the page its this or a checkbox
        row.days = [row.days];
        row.time = [row.time];
        courses.push(row);
      }
    }
  });

  return courses;
};

exports.parseRegisteredCourses = function(raw_html) {
  var column_map = {
    0: 'status',
    2: 'crn',
    3: 'department',
    4: 'course_number',
    5: 'section',
    6: 'type',
    8: 'credit',
    10: 'title',
  };

  var error_map = {
    0: 'ErrorMsg',
    1: 'crn',
    2: 'department',
    3: 'course_number',
    4: 'section',
    5: 'type',
    7: 'credit',
    9: 'title',
  };

  var $ = cheerio.load(raw_html);
  var courses = [];
  // some magic sauce
  $('.datadisplaytable').find('tr').each(function () {
    var row = {};
    var isError;
    $(this).find('td').each(function (j) {
      if(j === 0) {
        isError = $(this).text().indexOf('Web Registered') === -1;
      }
      if(!isError && column_map[j])
        row[column_map[j]] = $(this).text();
      else if (isError && error_map[j])
        row[error_map[j]] = $(this).text();
    });
    if (row.department)
      courses.push(row);
  });

  return courses;
};

module.exports = {
  parseTranscript: exports.parseTranscript,
  parseCourses: exports.parseCourses,
  parseRegisteredCourses: exports.parseRegisteredCourses,
  
  parseCourseDetail: function(html) {
    var $ = cheerio.load(html);
    var courseDetail = {};
    
    // Extract course information from the detail page
    var courseTitle = $('.ddtitle').first().text();
    if (courseTitle) {
      // Parse course title which typically contains: Course Name - CRN - DEPT NUM - SEC
      var titleParts = courseTitle.split(' - ');
      if (titleParts.length >= 4) {
        courseDetail.title = titleParts[0];
        courseDetail.crn = titleParts[1];
        courseDetail.course_code = titleParts[2];
        courseDetail.section = titleParts[3];
      }
    }
    
    // Extract detailed information from the course detail table
    $('.dddefault').each(function() {
      var text = $(this).text().trim();
      
      if (text.includes('Associated Term:')) {
        courseDetail.term = text.replace('Associated Term:', '').trim();
      } else if (text.includes('Registration Dates:')) {
        courseDetail.registration_dates = text.replace('Registration Dates:', '').trim();
      } else if (text.includes('Levels:')) {
        courseDetail.levels = text.replace('Levels:', '').trim();
      } else if (text.includes('Campus:')) {
        courseDetail.campus = text.replace('Campus:', '').trim();
      } else if (text.includes('Schedule Type:')) {
        courseDetail.schedule_type = text.replace('Schedule Type:', '').trim();
      } else if (text.includes('Credits:')) {
        courseDetail.credits = text.replace('Credits:', '').trim();
      }
    });
    
    // Extract meeting times and instructor information
    var meetingTimes = [];
    $('.dddefault table tr').each(function() {
      var row = $(this);
      var cells = row.find('td');
      
      if (cells.length >= 7) {
        var meetingTime = {
          type: cells.eq(0).text().trim(),
          time: cells.eq(1).text().trim(),
          days: cells.eq(2).text().trim(),
          location: cells.eq(3).text().trim(),
          date_range: cells.eq(4).text().trim(),
          schedule_type: cells.eq(5).text().trim(),
          instructors: cells.eq(6).text().trim()
        };
        
        if (meetingTime.type && meetingTime.type !== 'Type') {
          meetingTimes.push(meetingTime);
        }
      }
    });
    
    courseDetail.meeting_times = meetingTimes;
    
    // Extract any additional course description or prerequisites
    var description = $('.dddefault').last().text();
    if (description && description.length > 50) {
      courseDetail.description = description.trim();
    }
    
    return courseDetail;
  },
  
  parseWeeklySchedule: function(html) {
    console.log('Parsing weekly schedule HTML, length:', html ? html.length : 0);
    
    var cheerio = require('cheerio');
    var $ = cheerio.load(html);
    var courses = [];
    
    try {
      // First check if there's a "No courses" message
      var noCoursesText = $('th:contains("No courses with assigned times")').text();
      if (noCoursesText) {
        console.log('Found "No courses" message, but checking for course links anyway');
      }
      
      // Look for course links anywhere in the document, not just in tables
      var courseLinks = $('a[href*="P_CrseSchdDetl"]');
      console.log('Found', courseLinks.length, 'course links in the entire document');
      
      if (courseLinks.length === 0) {
        console.log('No course links found, returning empty array');
        return courses;
      }
      
      // Find the schedule table with class="datadisplaytable"
      var scheduleTable = $('table.datadisplaytable');
      console.log('Found', scheduleTable.length, 'datadisplaytable tables');
      
      // Use the table that contains course links
      var targetTable = null;
      scheduleTable.each(function() {
        var table = $(this);
        if (table.find('a[href*="P_CrseSchdDetl"]').length > 0) {
          targetTable = table;
          return false; // break
        }
      });
      
      if (!targetTable) {
        console.log('No table with course links found');
        return courses;
      }
      
      console.log('Found schedule table with course links');
      
      // Get the header row to identify day columns (skip first column which is for time)
      var headerRow = targetTable.find('tr').first();
      var dayHeaders = [];
      headerRow.find('th').each(function(index) {
        var headerText = $(this).text().trim();
        dayHeaders[index] = headerText;
        console.log('Header column', index, ':', headerText);
      });
      
      // Map header indices to day names - start from index 1 to skip time column
      var dayMap = {};
      dayHeaders.forEach(function(header, index) {
        if (index === 0) return; // Skip first column (time)
        
        var cleanHeader = header.toLowerCase().trim();
        if (cleanHeader.includes('monday') || cleanHeader === 'mon') dayMap[index] = 'Monday';
        else if (cleanHeader.includes('tuesday') || cleanHeader === 'tue' || cleanHeader === 'tues') dayMap[index] = 'Tuesday';
        else if (cleanHeader.includes('wednesday') || cleanHeader === 'wed') dayMap[index] = 'Wednesday';
        else if (cleanHeader.includes('thursday') || cleanHeader === 'thu' || cleanHeader === 'thur' || cleanHeader === 'thurs') dayMap[index] = 'Thursday';
        else if (cleanHeader.includes('friday') || cleanHeader === 'fri') dayMap[index] = 'Friday';
        else if (cleanHeader.includes('saturday') || cleanHeader === 'sat') dayMap[index] = 'Saturday';
        else if (cleanHeader.includes('sunday') || cleanHeader === 'sun') dayMap[index] = 'Sunday';
      });
      
      console.log('Day map:', dayMap);
      
      // Process each row after the header
      targetTable.find('tr').each(function(rowIndex) {
        if (rowIndex === 0) return; // Skip header row
        
        var row = $(this);
        console.log('Processing row', rowIndex);
        
        // Process each cell in the row
        row.find('td').each(function(cellIndex) {
          var cell = $(this);
          var courseLinkInCell = cell.find('a[href*="P_CrseSchdDetl"]');
          
          if (courseLinkInCell.length > 0) {
            // Calculate the actual column index by counting previous cells in this row
            // and accounting for the first time column
            var actualColumnIndex = 1; // Start at 1 to account for time column
            
            // Count previous td elements in this row
            cell.prevAll('td').each(function() {
              var prevColspan = parseInt($(this).attr('colspan')) || 1;
              actualColumnIndex += prevColspan;
            });
            
            // Also check if there's a th (time label) in this row that would shift everything
            var timeLabel = row.find('th').first();
            if (timeLabel.length > 0) {
              // If there's a time label, all td elements are shifted by its presence
              // but we already accounted for this with actualColumnIndex starting at 1
            }
            
            var colspan = parseInt(cell.attr('colspan')) || 1;
            var rowspan = parseInt(cell.attr('rowspan')) || 1;
            
            var day = dayMap[actualColumnIndex];
            console.log('Found', courseLinkInCell.length, 'course links in cell', cellIndex, 'actual column:', actualColumnIndex, 'day:', day, 'rowspan:', rowspan, 'colspan:', colspan);
            
            // Process each course link in this cell
            courseLinkInCell.each(function() {
              var link = $(this);
              var href = link.attr('href');
              var courseText = link.html(); // Use HTML to preserve line breaks
              
              console.log('Processing course link:', courseText, 'on day:', day);
              
              // Extract CRN from the href URL
              var crnMatch = href.match(/crn=(\d+)/);
              var crn = crnMatch ? crnMatch[1] : '';
              
              console.log('Extracted CRN:', crn);
              
              // Parse the course text from the HTML structure
              // Replace <br> tags with newlines and then split
              var cleanText = courseText.replace(/<br\s*\/?>/gi, '\n').replace(/<[^>]*>/g, '');
              var lines = cleanText.split('\n').map(function(line) { return line.trim(); }).filter(Boolean);
              console.log('Course text lines:', lines);
              
              if (lines.length >= 1) {
                // First line: course code with section (e.g., "MGCR 341-001")
                var courseCodeMatch = lines[0].match(/^([A-Z]+)\s+(\d+)-(\w+)/);
                
                if (courseCodeMatch) {
                  var department = courseCodeMatch[1];
                  var course_number = courseCodeMatch[2];
                  var section = courseCodeMatch[3];
                  
                  console.log('Parsed course code:', { department: department, course_number: course_number, section: section });
                  
                  // Extract time from any line that contains time pattern
                  var timeInfo = '';
                  for (var i = 0; i < lines.length; i++) {
                    if (lines[i].match(/\d{1,2}:\d{2}\s*(?:am|pm)/i)) {
                      timeInfo = lines[i];
                      break;
                    }
                  }
                  
                  console.log('Found time info:', timeInfo);
                  
                  // Extract location (usually the last line that doesn't contain time or CRN)
                  var location = '';
                  for (var i = lines.length - 1; i >= 0; i--) {
                    if (!lines[i].match(/\d{1,2}:\d{2}/) && !lines[i].match(/^\d+/) && lines[i].length > 5) {
                      location = lines[i];
                      break;
                    }
                  }
                  
                  console.log('Found location:', location);
                  
                  // Convert time format
                  function convertTime(timeStr) {
                    if (!timeStr) return '';
                    
                    return timeStr.replace(/(\d{1,2}):(\d{2})\s*(am|pm)/gi, function(match, hour, min, ampm) {
                      var h = parseInt(hour);
                      if (ampm.toLowerCase() === 'pm' && h !== 12) h += 12;
                      if (ampm.toLowerCase() === 'am' && h === 12) h = 0;
                      var hourStr = h.toString();
                      if (hourStr.length === 1) hourStr = '0' + hourStr;
                      return hourStr + ':' + min;
                    });
                  }
                  
                  var time24 = convertTime(timeInfo);
                  console.log('Converted time:', time24);
                  
                  // Check if we already have this course
                  var existingCourse = null;
                  for (var i = 0; i < courses.length; i++) {
                    if (courses[i].crn === crn) {
                      existingCourse = courses[i];
                      break;
                    }
                  }
                  
                  if (existingCourse) {
                    // Add this day and time to existing course
                    if (day && existingCourse.days.indexOf(day) === -1) {
                      existingCourse.days.push(day);
                      existingCourse.time.push(time24);
                    }
                    console.log('Updated existing course:', existingCourse);
                  } else {
                    // Create new course entry
                    var course = {
                      crn: crn,
                      department: department,
                      course_number: course_number,
                      section: section,
                      title: department + ' ' + course_number,
                      instructor: '',
                      days: day ? [day] : [],
                      time: time24 ? [time24] : [],
                      location: location,
                      credits: '',
                      type: 'Lecture'
                    };
                    
                    console.log('Created new course:', course);
                    courses.push(course);
                  }
                } else {
                  console.log('Could not parse course code from:', lines[0]);
                }
              } else {
                console.log('Insufficient course text lines:', lines);
              }
            });
          }
        });
      });
      
      console.log('Parsed courses from weekly schedule:', courses);
      return courses;
    } catch (error) {
      console.log('Error parsing weekly schedule:', error);
      return [];
    }
  }
};
